// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package leasehold

import (
	"math/big"
	"strings"

	fiscobcos "github.com/chislab/go-fiscobcos"
	"github.com/chislab/go-fiscobcos/accounts/abi"
	"github.com/chislab/go-fiscobcos/accounts/abi/bind"
	"github.com/chislab/go-fiscobcos/common"
	"github.com/chislab/go-fiscobcos/common/hexutil"
	"github.com/chislab/go-fiscobcos/core/types"
	"github.com/chislab/go-fiscobcos/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = fiscobcos.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// devicePower is an auto generated low-level Go binding around an user-defined struct.
type devicePower struct {
	CreatedAt   *big.Int
	Consumption *big.Int
}

// leaseholdOrder is an auto generated low-level Go binding around an user-defined struct.
type leaseholdOrder struct {
	From      common.Address
	Property  common.Address
	CreatedAt *big.Int
	StartAt   int64
	EndAt     int64
	Location  []byte
	Funds     *big.Int
	Status    uint8
}

// leaseholdRoom is an auto generated low-level Go binding around an user-defined struct.
type leaseholdRoom struct {
	Landlord    common.Address
	Property    common.Address
	Factory     common.Address
	Location    []byte
	Price       *big.Int
	Area        []byte
	Status      uint8
	Description []byte
	DeviceIds   []common.Address
}

// LeaseholdABI is the input ABI used to generate the binding from.
const LeaseholdABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvtOrderMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"area\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"description\",\"type\":\"bytes\"}],\"name\":\"EvtRecordRoomRegister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"category\",\"type\":\"bytes\"}],\"name\":\"EvtRegisterDevice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EvtTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"confirmOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deviceId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"logId\",\"type\":\"uint256\"}],\"name\":\"getLog\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumption\",\"type\":\"uint256\"}],\"internalType\":\"structdevice.Power\",\"name\":\"log\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getOrderStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"int64\",\"name\":\"startAt\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"endAt\",\"type\":\"int64\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"structleasehold.Order\",\"name\":\"myOrder\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"}],\"name\":\"getRoom\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"landlord\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"area\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"description\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"deviceIds\",\"type\":\"address[]\"}],\"internalType\":\"structleasehold.Room\",\"name\":\"roomInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deviceOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"curStatus\",\"type\":\"uint8\"}],\"name\":\"isDeviceAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"int64\",\"name\":\"startAt\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"endAt\",\"type\":\"int64\"}],\"name\":\"isOrderConflict\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isConflict\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"internalType\":\"int64\",\"name\":\"startAt\",\"type\":\"int64\"},{\"internalType\":\"int64\",\"name\":\"endAt\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"makeOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"deviceId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"category\",\"type\":\"bytes\"}],\"name\":\"registerDevice\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"area\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"description\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"deviceIds\",\"type\":\"address[]\"}],\"name\":\"roomRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"location\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"area\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"nextStatus\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"description\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"deviceIds\",\"type\":\"address[]\"}],\"name\":\"updateRoomInfo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"consumption\",\"type\":\"uint256\"}],\"name\":\"uploadLogs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// LeaseholdBin is the compiled bytecode used for deploying new contracts.
var LeaseholdBin = "0x608060405260006100146100b760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100bf565b600033905090565b61397780620000cf6000396000f3fe6080604052600436106100e85760003560e01c806367ba7a521161008a5780638da5cb5b116100595780638da5cb5b146102ce578063c05cc454146102f9578063cf09855514610322578063f2fde38b1461035f576100e8565b806367ba7a521461023557806370a082311461025e578063715018a61461029b5780638ac7d79c146102b2576100e8565b8063389af591116100c6578063389af591146101625780633f70d56e1461019f57806345fa8aae146101dc57806362ce4f5714610219576100e8565b806308ad3c54146100ed578063169b7f61146101095780631d031c3614610125575b600080fd5b61010760048036036101029190810190612fc6565b610388565b005b610123600480360361011e919081019061311a565b61081b565b005b34801561013157600080fd5b5061014c600480360361014791908101906130de565b610c7e565b604051610159919061377a565b60405180910390f35b34801561016e57600080fd5b5061018960048036036101849190810190613049565b611054565b6040516101969190613348565b60405180910390f35b3480156101ab57600080fd5b506101c660048036036101c191908101906130b2565b611060565b6040516101d3919061375e565b60405180910390f35b3480156101e857600080fd5b5061020360048036036101fe919081019061319e565b6110e7565b60405161021091906136c2565b60405180910390f35b610233600480360361022e9190810190612edf565b61131d565b005b34801561024157600080fd5b5061025c60048036036102579190810190612edf565b61197f565b005b34801561026a57600080fd5b5061028560048036036102809190810190612ebc565b612014565b6040516102929190613852565b60405180910390f35b3480156102a757600080fd5b506102b0612060565b005b6102cc60048036036102c7919081019061319e565b6121b5565b005b3480156102da57600080fd5b506102e36122d2565b6040516102f091906132b5565b60405180910390f35b34801561030557600080fd5b50610320600480360361031b919081019061319e565b6122fb565b005b34801561032e57600080fd5b50610349600480360361034491908101906131b9565b612430565b6040516103569190613348565b60405180910390f35b34801561036b57600080fd5b5061038660048036036103819190810190612ebc565b6124c1565b005b610390612b08565b61039985610c7e565b905060028160c0015160ff16146103e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dc906134dd565b60405180910390fd5b6060600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156104ad57602002820191906000526020600020905b815481526020019060010190808311610499575b5050505050905060008090505b815181101561052e576104e18282815181106104d257fe5b60200260200101518787612430565b15610521576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051890613461565b60405180910390fd5b80806001019150506104ba565b50610537612b99565b6040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001846020015173ffffffffffffffffffffffffffffffffffffffff1681526020014281526020018760070b81526020018660070b8152602001888152602001858152602001600160ff168152509050600681908060018154018082558091505060019003906000526020600020906007020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060808201518160030160086101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555060a08201518160040190805190602001906106f1929190612c13565b5060c0820151816005015560e08201518160060160006101000a81548160ff021916908360ff1602179055505050600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060016006805490500390806001815401808255809150506001900390600052602060002001600090919091909150557ff3f2ef3f7ff6a1936e0ec6c24b3822a5d5bab188cc85e800821aa9f3df8b9dd8600160068054905003338a8a88604051610809959493929190613863565b60405180910390a15050505050505050565b610823612c93565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040516108709190613297565b9081526020016040518091039020604051806060016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109225780601f106108f757610100808354040283529160200191610922565b820191906000526020600020905b81548152906001019060200180831161090557829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a1a5780601f106109ef57610100808354040283529160200191610a1a565b820191906000526020600020905b8154815290600101906020018083116109fd57829003601f168201915b5050505050815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f90613620565b60405180910390fd5b60405180606001604052808681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083604051610b169190613297565b90815260200160405180910390206000820151816000019080519060200190610b40929190612c13565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190610ba4929190612c13565b50905050600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040528042815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550507fc74d72b695002a6ada4592e67c0a815265eeed7dc782277d466de52250f5b886858484604051610c6f9392919061335b565b60405180910390a15050505050565b610c86612b08565b600582604051610c969190613297565b9081526020016040518091039020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e4b5780601f10610e2057610100808354040283529160200191610e4b565b820191906000526020600020905b815481529060010190602001808311610e2e57829003601f168201915b5050505050815260200160048201548152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ef75780601f10610ecc57610100808354040283529160200191610ef7565b820191906000526020600020905b815481529060010190602001808311610eda57829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff168152602001600782018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fb65780601f10610f8b57610100808354040283529160200191610fb6565b820191906000526020600020905b815481529060010190602001808311610f9957829003601f168201915b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561104457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610ffa575b5050505050815250509050919050565b60008090509392505050565b611068612cca565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106110b257fe5b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050905092915050565b6110ef612b99565b6006805490508210611136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112d9061349f565b60405180910390fd5b6006828154811061114357fe5b9060005260206000209060070201604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460070b60070b60070b81526020016003820160089054906101000a900460070b60070b60070b8152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112e65780601f106112bb576101008083540402835291602001916112e6565b820191906000526020600020905b8154815290600101906020018083116112c957829003601f168201915b50505050508152602001600582015481526020016006820160009054906101000a900460ff1660ff1660ff16815250509050919050565b611325612b08565b6005876040516113359190613297565b9081526020016040518091039020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ea5780601f106114bf576101008083540402835291602001916114ea565b820191906000526020600020905b8154815290600101906020018083116114cd57829003601f168201915b5050505050815260200160048201548152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115965780601f1061156b57610100808354040283529160200191611596565b820191906000526020600020905b81548152906001019060200180831161157957829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff168152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116555780601f1061162a57610100808354040283529160200191611655565b820191906000526020600020905b81548152906001019060200180831161163857829003601f168201915b50505050508152602001600882018054806020026020016040519081016040528092919081815260200182805480156116e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611699575b5050505050815250509050806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175790613684565b60405180910390fd5b876005886040516117719190613297565b908152602001604051809103902060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550866005886040516117d19190613297565b908152602001604051809103902060030190805190602001906117f5929190612ce4565b50856005886040516118079190613297565b9081526020016040518091039020600401819055508460058860405161182d9190613297565b90815260200160405180910390206005019080519060200190611851929190612ce4565b50836005886040516118639190613297565b908152602001604051809103902060060160006101000a81548160ff021916908360ff1602179055508260058860405161189d9190613297565b908152602001604051809103902060070190805190602001906118c1929190612ce4565b5060008090505b8251811015611973576005886040516118e19190613297565b90815260200160405180910390206008018382815181106118fe57fe5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806001019150506118c8565b50505050505050505050565b611987612b08565b6005876040516119979190613297565b9081526020016040518091039020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b4c5780601f10611b2157610100808354040283529160200191611b4c565b820191906000526020600020905b815481529060010190602001808311611b2f57829003601f168201915b5050505050815260200160048201548152602001600582018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bf85780601f10611bcd57610100808354040283529160200191611bf8565b820191906000526020600020905b815481529060010190602001808311611bdb57829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff168152602001600782018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cb75780601f10611c8c57610100808354040283529160200191611cb7565b820191906000526020600020905b815481529060010190602001808311611c9a57829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015611d4557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611cfb575b505050505081525050905087600588604051611d619190613297565b908152602001604051809103902060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600588604051611dc19190613297565b908152602001604051809103902060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600588604051611e219190613297565b90815260200160405180910390206003019080519060200190611e45929190612ce4565b5085600588604051611e579190613297565b90815260200160405180910390206004018190555084600588604051611e7d9190613297565b90815260200160405180910390206005019080519060200190611ea1929190612ce4565b5083600588604051611eb39190613297565b908152602001604051809103902060060160006101000a81548160ff021916908360ff16021790555082600588604051611eed9190613297565b90815260200160405180910390206007019080519060200190611f11929190612ce4565b5060008090505b8251811015611fc357600588604051611f319190613297565b9081526020016040518091039020600801838281518110611f4e57fe5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508080600101915050611f18565b507f5c08d5d55ce51982fdd8cd02e5901a3a7339a0657b0a35861397796265920bfb338a8a8a8a8a8a8a6040516120019897969594939291906132ce565b60405180910390a1505050505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b612068612685565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146120f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ed9061351b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6121bd612b99565b6121c6826110e7565b905060018160e0015160ff1614612212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220990613558565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227b906135bc565b60405180910390fd5b6122968160a001518260c0015161268d565b6003600683815481106122a557fe5b906000526020600020906007020160060160006101000a81548160ff021916908360ff1602179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154811061234857fe5b9060005260206000209060020201600001541161239a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612391906133fd565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052804281526020018381525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505050565b600061243a612b99565b612443856110e7565b905060018160e0015160ff1614156124b457806060015160070b8460070b121580156124795750806080015160070b8460070b13155b806124a45750806080015160070b8360070b121580156124a35750806080015160070b8360070b13155b5b156124b35760019150506124ba565b5b60009150505b9392505050565b6124c9612685565b73ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254e9061351b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125be90613399565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b612695612b08565b6005836040516126a59190613297565b9081526020016040518091039020604051806101200160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561285a5780601f1061282f5761010080835404028352916020019161285a565b820191906000526020600020905b81548152906001019060200180831161283d57829003601f168201915b5050505050815260200160048201548152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129065780601f106128db57610100808354040283529160200191612906565b820191906000526020600020905b8154815290600101906020018083116128e957829003601f168201915b505050505081526020016006820160009054906101000a900460ff1660ff1660ff168152602001600782018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129c55780601f1061299a576101008083540402835291602001916129c5565b820191906000526020600020905b8154815290600101906020018083116129a857829003601f168201915b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015612a5357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612a09575b5050505050815250509050612a798160000151600a6007850281612a7357fe5b04612ab4565b612a948160200151600a6002850281612a8e57fe5b04612ab4565b612aaf8160400151600a6001850281612aa957fe5b04612ab4565b505050565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825401925050819055505050565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160608152602001600060ff16815260200160608152602001606081525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600060070b8152602001600060070b81526020016060815260200160008152602001600060ff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612c5457805160ff1916838001178555612c82565b82800160010185558215612c82579182015b82811115612c81578251825591602001919060010190612c66565b5b509050612c8f9190612d64565b5090565b604051806060016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b604051806040016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612d2557805160ff1916838001178555612d53565b82800160010185558215612d53579182015b82811115612d52578251825591602001919060010190612d37565b5b509050612d609190612d64565b5090565b612d8691905b80821115612d82576000816000905550600101612d6a565b5090565b90565b60008135905060018060a01b0381168114612da357600080fd5b92915050565b600082601f830112612db9578081fd5b813567ffffffffffffffff811115612dcf578182fd5b6020808202612ddf8282016138a6565b93508383855282850190508286018784848901011115612dfe57600080fd5b600092505b84831015612e2c57612e158882612d89565b825283820191508381019050600183019250612e03565b505050505092915050565b600082601f830112612e47578081fd5b813567ffffffffffffffff811115612e5d578182fd5b612e706020601f19601f840116016138a6565b9150808252836020828501011115612e8757600080fd5b806020840160208401376000602082840101525092915050565b60008135905060ff81168114612eb657600080fd5b92915050565b600060208284031215612ecd578081fd5b612ed78383612d89565b905092915050565b600080600080600080600080610100898b031215612efb578384fd5b612f058a8a612d89565b9750612f148a60208b01612d89565b9650604089013567ffffffffffffffff80821115612f30578586fd5b612f3c8c838d01612e37565b975060608b0135965060808b0135915080821115612f58578586fd5b612f648c838d01612e37565b9550612f738c60a08d01612ea1565b945060c08b0135915080821115612f88578384fd5b612f948c838d01612e37565b935060e08b0135915080821115612fa9578283fd5b50612fb68b828c01612da9565b9150509295985092959890939650565b600080600080600060a08688031215612fdd578081fd5b8535612fe881613918565b80955050602086013567ffffffffffffffff811115613005578182fd5b61301188828901612e37565b94505060408601356130228161392f565b8093505060608601356130348161392f565b80925050608086013590509295509295909350565b60008060006060848603121561305d578283fd5b833561306881613918565b80935050602084013567ffffffffffffffff811115613085578283fd5b61309186828701612e37565b925050604084013560ff811681146130a7578182fd5b809150509250925092565b600080604083850312156130c4578182fd5b6130ce8484612d89565b9150602083013590509250929050565b6000602082840312156130ef578081fd5b813567ffffffffffffffff811115613105578182fd5b61311184828501612e37565b91505092915050565b6000806000806080858703121561312f578384fd5b843567ffffffffffffffff80821115613146578586fd5b61315288838901612e37565b95506131618860208901612d89565b94506131708860408901612d89565b93506060870135915080821115613185578283fd5b5061319287828801612e37565b91505092959194509250565b6000602082840312156131af578081fd5b8135905092915050565b6000806000606084860312156131cd578283fd5b8335925060208401356131df8161392f565b8092505060408401356131f18161392f565b809150509250925092565b60018060a01b03811682525050565b6000815180845260208401935060208301825b828110156132495760018060a01b03825116865260208601955060208201915060018101905061321e565b50505082905092915050565b6000815180845261326d8160208601602086016138e5565b6020601f19601f83011685010191505092915050565b8060070b82525050565b60ff811682525050565b600082516132a98184602087016138e5565b80830191505092915050565b600060208201905060018060a01b038316825292915050565b600061010060018060a01b03808c168452808b166020850152808a1660408501525080606084015261330281840189613255565b87608085015283810360a085015261331a8188613255565b91505060ff851660c084015282810360e08401526133388185613255565b9150509998505050505050505050565b6000602082019050821515825292915050565b60006060825261336e6060830186613255565b60018060a01b0385166020840152828103604084015261338e8185613255565b915050949350505050565b600060208252602660208301527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408301527f64647265737300000000000000000000000000000000000000000000000000006060830152608082019050919050565b600060208252602a60208301527f5b4465766963655d2875706c6f61644c6f6773292064657669636520646f657360408301527f6e27742065786973742e000000000000000000000000000000000000000000006060830152608082019050919050565b600060208252601860208301527f65786973747320756e66696e6973686564206f726465722e00000000000000006040830152606082019050919050565b600060208252601060208301527f496e76616c6964206f7264657249642e000000000000000000000000000000006040830152606082019050919050565b600060208252601c60208301527f6c6f636174696f6e20726f6f6d206973206e6f74206578697374732e000000006040830152606082019050919050565b6000602082526020808301527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726040830152606082019050919050565b600060208252602860208301527f6f6e6c7920737461747573203d3d2031206f726465722063616e20626520636f60408301527f6e6669726d65642e0000000000000000000000000000000000000000000000006060830152608082019050919050565b600060208252602560208301527f6f6e6c79206c616e646c6f72642063616e20636f6e6669726d2074686973206f60408301527f726465722e0000000000000000000000000000000000000000000000000000006060830152608082019050919050565b600060208252602760208301527f5b4465766963655d28726567697374657244657669636529206465766963652060408301527f6578697374732e000000000000000000000000000000000000000000000000006060830152608082019050919050565b600060208252601860208301527fe58faae69c89e789a9e4b89ae883bde5a49fe4bfaee694b900000000000000006040830152606082019050919050565b6000602082526136d283516138d3565b602083015260018060a01b0360208401511660408301526040830151606083015260608301516137056080840182613283565b50608083015161371860a0840182613283565b5060a08301516101008060c0850152613735610120850183613255565b60c086015160e086015260e086015192506137528286018461328d565b80935050505092915050565b6000604082019050825182526020830151602083015292915050565b60006020825261378e6020830184516131fc565b60208301516137a060408401826131fc565b5060408301516137b360608401826131fc565b5060608301516101208060808501526137d0610140850183613255565b608086015160a086015260a08601519250601f19808683030160c08701526137f88285613255565b60c0880151945061380c60e088018661328d565b60e08801519450610100925081878203018388015261382b8186613255565b838901519550828882030185890152613844818761320b565b965050505050505092915050565b600060208201905082825292915050565b600086825260018060a01b03808716602084015280861660408401525060a0606083015261389460a0830185613255565b90508260808301529695505050505050565b6000604051905081810181811067ffffffffffffffff821117156138c957600080fd5b8060405250919050565b600060018060a01b0382169050919050565b60005b838110156139035780820151818401526020810190506138e8565b83811115613912576000848401525b50505050565b60018060a01b038116811461392c57600080fd5b50565b8060070b811461393e57600080fd5b5056fea2646970667358221220953df6c7d6c44bde9b3aa257dd8ac5779379cf54b2319bf56ad9e3fc0bb125e664736f6c63430006000033"

// DeployLeasehold deploys a new FiscoBcos contract, binding an instance of Leasehold to it.
func DeployLeasehold(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Leasehold, error) {
	parsed, err := abi.JSON(strings.NewReader(LeaseholdABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(LeaseholdBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Leasehold{LeaseholdCaller: LeaseholdCaller{contract: contract}, LeaseholdTransactor: LeaseholdTransactor{contract: contract}, LeaseholdFilterer: LeaseholdFilterer{contract: contract}, ABI: parsed}, nil
}

// Leasehold is an auto generated Go binding around an FiscoBcos contract.
type Leasehold struct {
	LeaseholdCaller             // Read-only binding to the contract
	LeaseholdTransactor         // Write-only binding to the contract
	LeaseholdFilterer           // Log filterer for contract events
	ABI                 abi.ABI // contract abi
}

// LeaseholdCaller is an auto generated read-only Go binding around an FiscoBcos contract.
type LeaseholdCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LeaseholdTransactor is an auto generated write-only Go binding around an FiscoBcos contract.
type LeaseholdTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LeaseholdFilterer is an auto generated log filtering Go binding around an FiscoBcos contract events.
type LeaseholdFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LeaseholdSession is an auto generated Go binding around an FiscoBcos contract,
// with pre-set call and transact options.
type LeaseholdSession struct {
	Contract     *Leasehold        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LeaseholdCallerSession is an auto generated read-only Go binding around an FiscoBcos contract,
// with pre-set call options.
type LeaseholdCallerSession struct {
	Contract *LeaseholdCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// LeaseholdTransactorSession is an auto generated write-only Go binding around an FiscoBcos contract,
// with pre-set transact options.
type LeaseholdTransactorSession struct {
	Contract     *LeaseholdTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// LeaseholdRaw is an auto generated low-level Go binding around an FiscoBcos contract.
type LeaseholdRaw struct {
	Contract *Leasehold // Generic contract binding to access the raw methods on
}

// LeaseholdCallerRaw is an auto generated low-level read-only Go binding around an FiscoBcos contract.
type LeaseholdCallerRaw struct {
	Contract *LeaseholdCaller // Generic read-only contract binding to access the raw methods on
}

// LeaseholdTransactorRaw is an auto generated low-level write-only Go binding around an FiscoBcos contract.
type LeaseholdTransactorRaw struct {
	Contract *LeaseholdTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLeasehold creates a new instance of Leasehold, bound to a specific deployed contract.
func NewLeasehold(address common.Address, backend bind.ContractBackend) (*Leasehold, error) {
	contract, err := bindLeasehold(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	parsed, err := abi.JSON(strings.NewReader(LeaseholdABI))
	if err != nil {
		return nil, err
	}
	return &Leasehold{LeaseholdCaller: LeaseholdCaller{contract: contract}, LeaseholdTransactor: LeaseholdTransactor{contract: contract}, LeaseholdFilterer: LeaseholdFilterer{contract: contract}, ABI: parsed}, nil
}

// NewLeaseholdCaller creates a new read-only instance of Leasehold, bound to a specific deployed contract.
func NewLeaseholdCaller(address common.Address, caller bind.ContractCaller) (*LeaseholdCaller, error) {
	contract, err := bindLeasehold(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LeaseholdCaller{contract: contract}, nil
}

// NewLeaseholdTransactor creates a new write-only instance of Leasehold, bound to a specific deployed contract.
func NewLeaseholdTransactor(address common.Address, transactor bind.ContractTransactor) (*LeaseholdTransactor, error) {
	contract, err := bindLeasehold(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LeaseholdTransactor{contract: contract}, nil
}

// NewLeaseholdFilterer creates a new log filterer instance of Leasehold, bound to a specific deployed contract.
func NewLeaseholdFilterer(address common.Address, filterer bind.ContractFilterer) (*LeaseholdFilterer, error) {
	contract, err := bindLeasehold(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LeaseholdFilterer{contract: contract}, nil
}

// bindLeasehold binds a generic wrapper to an already deployed contract.
func bindLeasehold(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LeaseholdABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Leasehold *LeaseholdRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Leasehold.Contract.LeaseholdCaller.contract.Call(opts, result, method, params...)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Leasehold *LeaseholdRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Leasehold.Contract.LeaseholdTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Leasehold *LeaseholdCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Leasehold.Contract.contract.Call(opts, result, method, params...)
}

func (_Leasehold *LeaseholdCallerRaw) ReadCall(result interface{}, method string, output []byte) error {
	return _Leasehold.Contract.contract.ReadCall(result, method, output)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Leasehold *LeaseholdTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Leasehold.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address to) view returns(uint256)
func (_Leasehold *LeaseholdCaller) BalanceOf(opts *bind.CallOpts, to common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Leasehold.contract.Call(opts, out, "balanceOf", to)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address to) view returns(uint256)
func (_Leasehold *LeaseholdSession) BalanceOf(to common.Address) (*big.Int, error) {
	return _Leasehold.Contract.BalanceOf(&_Leasehold.CallOpts, to)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address to) view returns(uint256)
func (_Leasehold *LeaseholdCallerSession) BalanceOf(to common.Address) (*big.Int, error) {
	return _Leasehold.Contract.BalanceOf(&_Leasehold.CallOpts, to)
}

// GetLog is a free data retrieval call binding the contract method 0x3f70d56e.
//
// Solidity: function getLog(address deviceId, uint256 logId) view returns(devicePower log)
func (_Leasehold *LeaseholdCaller) GetLog(opts *bind.CallOpts, deviceId common.Address, logId *big.Int) (devicePower, error) {
	var (
		ret0 = new(devicePower)
	)
	out := ret0
	err := _Leasehold.contract.Call(opts, out, "getLog", deviceId, logId)
	return *ret0, err
}

// GetLog is a free data retrieval call binding the contract method 0x3f70d56e.
//
// Solidity: function getLog(address deviceId, uint256 logId) view returns(devicePower log)
func (_Leasehold *LeaseholdSession) GetLog(deviceId common.Address, logId *big.Int) (devicePower, error) {
	return _Leasehold.Contract.GetLog(&_Leasehold.CallOpts, deviceId, logId)
}

// GetLog is a free data retrieval call binding the contract method 0x3f70d56e.
//
// Solidity: function getLog(address deviceId, uint256 logId) view returns(devicePower log)
func (_Leasehold *LeaseholdCallerSession) GetLog(deviceId common.Address, logId *big.Int) (devicePower, error) {
	return _Leasehold.Contract.GetLog(&_Leasehold.CallOpts, deviceId, logId)
}

// GetOrderStatus is a free data retrieval call binding the contract method 0x45fa8aae.
//
// Solidity: function getOrderStatus(uint256 orderId) view returns(leaseholdOrder myOrder)
func (_Leasehold *LeaseholdCaller) GetOrderStatus(opts *bind.CallOpts, orderId *big.Int) (leaseholdOrder, error) {
	var (
		ret0 = new(leaseholdOrder)
	)
	out := ret0
	err := _Leasehold.contract.Call(opts, out, "getOrderStatus", orderId)
	return *ret0, err
}

// GetOrderStatus is a free data retrieval call binding the contract method 0x45fa8aae.
//
// Solidity: function getOrderStatus(uint256 orderId) view returns(leaseholdOrder myOrder)
func (_Leasehold *LeaseholdSession) GetOrderStatus(orderId *big.Int) (leaseholdOrder, error) {
	return _Leasehold.Contract.GetOrderStatus(&_Leasehold.CallOpts, orderId)
}

// GetOrderStatus is a free data retrieval call binding the contract method 0x45fa8aae.
//
// Solidity: function getOrderStatus(uint256 orderId) view returns(leaseholdOrder myOrder)
func (_Leasehold *LeaseholdCallerSession) GetOrderStatus(orderId *big.Int) (leaseholdOrder, error) {
	return _Leasehold.Contract.GetOrderStatus(&_Leasehold.CallOpts, orderId)
}

// GetRoom is a free data retrieval call binding the contract method 0x1d031c36.
//
// Solidity: function getRoom(bytes location) view returns(leaseholdRoom roomInfo)
func (_Leasehold *LeaseholdCaller) GetRoom(opts *bind.CallOpts, location []byte) (leaseholdRoom, error) {
	var (
		ret0 = new(leaseholdRoom)
	)
	out := ret0
	err := _Leasehold.contract.Call(opts, out, "getRoom", location)
	return *ret0, err
}

// GetRoom is a free data retrieval call binding the contract method 0x1d031c36.
//
// Solidity: function getRoom(bytes location) view returns(leaseholdRoom roomInfo)
func (_Leasehold *LeaseholdSession) GetRoom(location []byte) (leaseholdRoom, error) {
	return _Leasehold.Contract.GetRoom(&_Leasehold.CallOpts, location)
}

// GetRoom is a free data retrieval call binding the contract method 0x1d031c36.
//
// Solidity: function getRoom(bytes location) view returns(leaseholdRoom roomInfo)
func (_Leasehold *LeaseholdCallerSession) GetRoom(location []byte) (leaseholdRoom, error) {
	return _Leasehold.Contract.GetRoom(&_Leasehold.CallOpts, location)
}

// IsDeviceAuthorized is a free data retrieval call binding the contract method 0x389af591.
//
// Solidity: function isDeviceAuthorized(address deviceOwner, bytes location, uint8 curStatus) pure returns(bool)
func (_Leasehold *LeaseholdCaller) IsDeviceAuthorized(opts *bind.CallOpts, deviceOwner common.Address, location []byte, curStatus uint8) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Leasehold.contract.Call(opts, out, "isDeviceAuthorized", deviceOwner, location, curStatus)
	return *ret0, err
}

// IsDeviceAuthorized is a free data retrieval call binding the contract method 0x389af591.
//
// Solidity: function isDeviceAuthorized(address deviceOwner, bytes location, uint8 curStatus) pure returns(bool)
func (_Leasehold *LeaseholdSession) IsDeviceAuthorized(deviceOwner common.Address, location []byte, curStatus uint8) (bool, error) {
	return _Leasehold.Contract.IsDeviceAuthorized(&_Leasehold.CallOpts, deviceOwner, location, curStatus)
}

// IsDeviceAuthorized is a free data retrieval call binding the contract method 0x389af591.
//
// Solidity: function isDeviceAuthorized(address deviceOwner, bytes location, uint8 curStatus) pure returns(bool)
func (_Leasehold *LeaseholdCallerSession) IsDeviceAuthorized(deviceOwner common.Address, location []byte, curStatus uint8) (bool, error) {
	return _Leasehold.Contract.IsDeviceAuthorized(&_Leasehold.CallOpts, deviceOwner, location, curStatus)
}

// IsOrderConflict is a free data retrieval call binding the contract method 0xcf098555.
//
// Solidity: function isOrderConflict(uint256 orderId, int64 startAt, int64 endAt) view returns(bool isConflict)
func (_Leasehold *LeaseholdCaller) IsOrderConflict(opts *bind.CallOpts, orderId *big.Int, startAt int64, endAt int64) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Leasehold.contract.Call(opts, out, "isOrderConflict", orderId, startAt, endAt)
	return *ret0, err
}

// IsOrderConflict is a free data retrieval call binding the contract method 0xcf098555.
//
// Solidity: function isOrderConflict(uint256 orderId, int64 startAt, int64 endAt) view returns(bool isConflict)
func (_Leasehold *LeaseholdSession) IsOrderConflict(orderId *big.Int, startAt int64, endAt int64) (bool, error) {
	return _Leasehold.Contract.IsOrderConflict(&_Leasehold.CallOpts, orderId, startAt, endAt)
}

// IsOrderConflict is a free data retrieval call binding the contract method 0xcf098555.
//
// Solidity: function isOrderConflict(uint256 orderId, int64 startAt, int64 endAt) view returns(bool isConflict)
func (_Leasehold *LeaseholdCallerSession) IsOrderConflict(orderId *big.Int, startAt int64, endAt int64) (bool, error) {
	return _Leasehold.Contract.IsOrderConflict(&_Leasehold.CallOpts, orderId, startAt, endAt)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Leasehold *LeaseholdCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Leasehold.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Leasehold *LeaseholdSession) Owner() (common.Address, error) {
	return _Leasehold.Contract.Owner(&_Leasehold.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Leasehold *LeaseholdCallerSession) Owner() (common.Address, error) {
	return _Leasehold.Contract.Owner(&_Leasehold.CallOpts)
}

// ConfirmOrder is a paid mutator transaction binding the contract method 0x8ac7d79c.
//
// Solidity: function confirmOrder(uint256 orderId) payable returns()

/******************************************************************************************************************************/
func (_Leasehold *LeaseholdCaller) ReadConfirmOrder(output string) error {
	var ()
	out := &[]interface{}{}
	err := _Leasehold.contract.ReadCall(out, "confirmOrder", hexutil.MustDecode(output))
	return err
}

// ConfirmOrder is a free data retrieval call binding the contract method 0x8ac7d79c.
//
// Solidity: function confirmOrder(uint256 orderId) payable returns()
func (_Leasehold *LeaseholdSession) ReadConfirmOrder(output string) error {
	return _Leasehold.Contract.ReadConfirmOrder(output)
}

// ConfirmOrder is a free data retrieval call binding the contract method 0x8ac7d79c.
//
// Solidity: function confirmOrder(uint256 orderId) payable returns()
func (_Leasehold *LeaseholdCallerSession) ReadConfirmOrder(output string) error {
	return _Leasehold.Contract.ReadConfirmOrder(output)
}

/******************************************************************************************************************************/

func (_Leasehold *LeaseholdTransactor) ConfirmOrder(opts *bind.TransactOpts, orderId *big.Int) (*types.Transaction, error) {
	return _Leasehold.contract.Transact(opts, "confirmOrder", orderId)
}

// ConfirmOrder is a paid mutator transaction binding the contract method 0x8ac7d79c.
//
// Solidity: function confirmOrder(uint256 orderId) payable returns()
func (_Leasehold *LeaseholdSession) ConfirmOrder(orderId *big.Int) (*types.Transaction, error) {
	return _Leasehold.Contract.ConfirmOrder(&_Leasehold.TransactOpts, orderId)
}

// ConfirmOrder is a paid mutator transaction binding the contract method 0x8ac7d79c.
//
// Solidity: function confirmOrder(uint256 orderId) payable returns()
func (_Leasehold *LeaseholdTransactorSession) ConfirmOrder(orderId *big.Int) (*types.Transaction, error) {
	return _Leasehold.Contract.ConfirmOrder(&_Leasehold.TransactOpts, orderId)
}

// MakeOrder is a paid mutator transaction binding the contract method 0x08ad3c54.
//
// Solidity: function makeOrder(address to, bytes location, int64 startAt, int64 endAt, uint256 funds) payable returns()

/******************************************************************************************************************************/
func (_Leasehold *LeaseholdCaller) ReadMakeOrder(output string) error {
	var ()
	out := &[]interface{}{}
	err := _Leasehold.contract.ReadCall(out, "makeOrder", hexutil.MustDecode(output))
	return err
}

// MakeOrder is a free data retrieval call binding the contract method 0x08ad3c54.
//
// Solidity: function makeOrder(address to, bytes location, int64 startAt, int64 endAt, uint256 funds) payable returns()
func (_Leasehold *LeaseholdSession) ReadMakeOrder(output string) error {
	return _Leasehold.Contract.ReadMakeOrder(output)
}

// MakeOrder is a free data retrieval call binding the contract method 0x08ad3c54.
//
// Solidity: function makeOrder(address to, bytes location, int64 startAt, int64 endAt, uint256 funds) payable returns()
func (_Leasehold *LeaseholdCallerSession) ReadMakeOrder(output string) error {
	return _Leasehold.Contract.ReadMakeOrder(output)
}

/******************************************************************************************************************************/

func (_Leasehold *LeaseholdTransactor) MakeOrder(opts *bind.TransactOpts, to common.Address, location []byte, startAt int64, endAt int64, funds *big.Int) (*types.Transaction, error) {
	return _Leasehold.contract.Transact(opts, "makeOrder", to, location, startAt, endAt, funds)
}

// MakeOrder is a paid mutator transaction binding the contract method 0x08ad3c54.
//
// Solidity: function makeOrder(address to, bytes location, int64 startAt, int64 endAt, uint256 funds) payable returns()
func (_Leasehold *LeaseholdSession) MakeOrder(to common.Address, location []byte, startAt int64, endAt int64, funds *big.Int) (*types.Transaction, error) {
	return _Leasehold.Contract.MakeOrder(&_Leasehold.TransactOpts, to, location, startAt, endAt, funds)
}

// MakeOrder is a paid mutator transaction binding the contract method 0x08ad3c54.
//
// Solidity: function makeOrder(address to, bytes location, int64 startAt, int64 endAt, uint256 funds) payable returns()
func (_Leasehold *LeaseholdTransactorSession) MakeOrder(to common.Address, location []byte, startAt int64, endAt int64, funds *big.Int) (*types.Transaction, error) {
	return _Leasehold.Contract.MakeOrder(&_Leasehold.TransactOpts, to, location, startAt, endAt, funds)
}

// RegisterDevice is a paid mutator transaction binding the contract method 0x169b7f61.
//
// Solidity: function registerDevice(bytes location, address deviceId, address factory, bytes category) payable returns()

/******************************************************************************************************************************/
func (_Leasehold *LeaseholdCaller) ReadRegisterDevice(output string) error {
	var ()
	out := &[]interface{}{}
	err := _Leasehold.contract.ReadCall(out, "registerDevice", hexutil.MustDecode(output))
	return err
}

// RegisterDevice is a free data retrieval call binding the contract method 0x169b7f61.
//
// Solidity: function registerDevice(bytes location, address deviceId, address factory, bytes category) payable returns()
func (_Leasehold *LeaseholdSession) ReadRegisterDevice(output string) error {
	return _Leasehold.Contract.ReadRegisterDevice(output)
}

// RegisterDevice is a free data retrieval call binding the contract method 0x169b7f61.
//
// Solidity: function registerDevice(bytes location, address deviceId, address factory, bytes category) payable returns()
func (_Leasehold *LeaseholdCallerSession) ReadRegisterDevice(output string) error {
	return _Leasehold.Contract.ReadRegisterDevice(output)
}

/******************************************************************************************************************************/

func (_Leasehold *LeaseholdTransactor) RegisterDevice(opts *bind.TransactOpts, location []byte, deviceId common.Address, factory common.Address, category []byte) (*types.Transaction, error) {
	return _Leasehold.contract.Transact(opts, "registerDevice", location, deviceId, factory, category)
}

// RegisterDevice is a paid mutator transaction binding the contract method 0x169b7f61.
//
// Solidity: function registerDevice(bytes location, address deviceId, address factory, bytes category) payable returns()
func (_Leasehold *LeaseholdSession) RegisterDevice(location []byte, deviceId common.Address, factory common.Address, category []byte) (*types.Transaction, error) {
	return _Leasehold.Contract.RegisterDevice(&_Leasehold.TransactOpts, location, deviceId, factory, category)
}

// RegisterDevice is a paid mutator transaction binding the contract method 0x169b7f61.
//
// Solidity: function registerDevice(bytes location, address deviceId, address factory, bytes category) payable returns()
func (_Leasehold *LeaseholdTransactorSession) RegisterDevice(location []byte, deviceId common.Address, factory common.Address, category []byte) (*types.Transaction, error) {
	return _Leasehold.Contract.RegisterDevice(&_Leasehold.TransactOpts, location, deviceId, factory, category)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()

/******************************************************************************************************************************/
func (_Leasehold *LeaseholdCaller) ReadRenounceOwnership(output string) error {
	var ()
	out := &[]interface{}{}
	err := _Leasehold.contract.ReadCall(out, "renounceOwnership", hexutil.MustDecode(output))
	return err
}

// RenounceOwnership is a free data retrieval call binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Leasehold *LeaseholdSession) ReadRenounceOwnership(output string) error {
	return _Leasehold.Contract.ReadRenounceOwnership(output)
}

// RenounceOwnership is a free data retrieval call binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Leasehold *LeaseholdCallerSession) ReadRenounceOwnership(output string) error {
	return _Leasehold.Contract.ReadRenounceOwnership(output)
}

/******************************************************************************************************************************/

func (_Leasehold *LeaseholdTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Leasehold.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Leasehold *LeaseholdSession) RenounceOwnership() (*types.Transaction, error) {
	return _Leasehold.Contract.RenounceOwnership(&_Leasehold.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Leasehold *LeaseholdTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Leasehold.Contract.RenounceOwnership(&_Leasehold.TransactOpts)
}

// RoomRegister is a paid mutator transaction binding the contract method 0x67ba7a52.
//
// Solidity: function roomRegister(address property, address factory, bytes location, uint256 price, bytes area, uint8 status, bytes description, address[] deviceIds) returns()

/******************************************************************************************************************************/
func (_Leasehold *LeaseholdCaller) ReadRoomRegister(output string) error {
	var ()
	out := &[]interface{}{}
	err := _Leasehold.contract.ReadCall(out, "roomRegister", hexutil.MustDecode(output))
	return err
}

// RoomRegister is a free data retrieval call binding the contract method 0x67ba7a52.
//
// Solidity: function roomRegister(address property, address factory, bytes location, uint256 price, bytes area, uint8 status, bytes description, address[] deviceIds) returns()
func (_Leasehold *LeaseholdSession) ReadRoomRegister(output string) error {
	return _Leasehold.Contract.ReadRoomRegister(output)
}

// RoomRegister is a free data retrieval call binding the contract method 0x67ba7a52.
//
// Solidity: function roomRegister(address property, address factory, bytes location, uint256 price, bytes area, uint8 status, bytes description, address[] deviceIds) returns()
func (_Leasehold *LeaseholdCallerSession) ReadRoomRegister(output string) error {
	return _Leasehold.Contract.ReadRoomRegister(output)
}

/******************************************************************************************************************************/

func (_Leasehold *LeaseholdTransactor) RoomRegister(opts *bind.TransactOpts, property common.Address, factory common.Address, location []byte, price *big.Int, area []byte, status uint8, description []byte, deviceIds []common.Address) (*types.Transaction, error) {
	return _Leasehold.contract.Transact(opts, "roomRegister", property, factory, location, price, area, status, description, deviceIds)
}

// RoomRegister is a paid mutator transaction binding the contract method 0x67ba7a52.
//
// Solidity: function roomRegister(address property, address factory, bytes location, uint256 price, bytes area, uint8 status, bytes description, address[] deviceIds) returns()
func (_Leasehold *LeaseholdSession) RoomRegister(property common.Address, factory common.Address, location []byte, price *big.Int, area []byte, status uint8, description []byte, deviceIds []common.Address) (*types.Transaction, error) {
	return _Leasehold.Contract.RoomRegister(&_Leasehold.TransactOpts, property, factory, location, price, area, status, description, deviceIds)
}

// RoomRegister is a paid mutator transaction binding the contract method 0x67ba7a52.
//
// Solidity: function roomRegister(address property, address factory, bytes location, uint256 price, bytes area, uint8 status, bytes description, address[] deviceIds) returns()
func (_Leasehold *LeaseholdTransactorSession) RoomRegister(property common.Address, factory common.Address, location []byte, price *big.Int, area []byte, status uint8, description []byte, deviceIds []common.Address) (*types.Transaction, error) {
	return _Leasehold.Contract.RoomRegister(&_Leasehold.TransactOpts, property, factory, location, price, area, status, description, deviceIds)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()

/******************************************************************************************************************************/
func (_Leasehold *LeaseholdCaller) ReadTransferOwnership(output string) error {
	var ()
	out := &[]interface{}{}
	err := _Leasehold.contract.ReadCall(out, "transferOwnership", hexutil.MustDecode(output))
	return err
}

// TransferOwnership is a free data retrieval call binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Leasehold *LeaseholdSession) ReadTransferOwnership(output string) error {
	return _Leasehold.Contract.ReadTransferOwnership(output)
}

// TransferOwnership is a free data retrieval call binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Leasehold *LeaseholdCallerSession) ReadTransferOwnership(output string) error {
	return _Leasehold.Contract.ReadTransferOwnership(output)
}

/******************************************************************************************************************************/

func (_Leasehold *LeaseholdTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Leasehold.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Leasehold *LeaseholdSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Leasehold.Contract.TransferOwnership(&_Leasehold.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Leasehold *LeaseholdTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Leasehold.Contract.TransferOwnership(&_Leasehold.TransactOpts, newOwner)
}

// UpdateRoomInfo is a paid mutator transaction binding the contract method 0x62ce4f57.
//
// Solidity: function updateRoomInfo(address property, address factory, bytes location, uint256 price, bytes area, uint8 nextStatus, bytes description, address[] deviceIds) payable returns()

/******************************************************************************************************************************/
func (_Leasehold *LeaseholdCaller) ReadUpdateRoomInfo(output string) error {
	var ()
	out := &[]interface{}{}
	err := _Leasehold.contract.ReadCall(out, "updateRoomInfo", hexutil.MustDecode(output))
	return err
}

// UpdateRoomInfo is a free data retrieval call binding the contract method 0x62ce4f57.
//
// Solidity: function updateRoomInfo(address property, address factory, bytes location, uint256 price, bytes area, uint8 nextStatus, bytes description, address[] deviceIds) payable returns()
func (_Leasehold *LeaseholdSession) ReadUpdateRoomInfo(output string) error {
	return _Leasehold.Contract.ReadUpdateRoomInfo(output)
}

// UpdateRoomInfo is a free data retrieval call binding the contract method 0x62ce4f57.
//
// Solidity: function updateRoomInfo(address property, address factory, bytes location, uint256 price, bytes area, uint8 nextStatus, bytes description, address[] deviceIds) payable returns()
func (_Leasehold *LeaseholdCallerSession) ReadUpdateRoomInfo(output string) error {
	return _Leasehold.Contract.ReadUpdateRoomInfo(output)
}

/******************************************************************************************************************************/

func (_Leasehold *LeaseholdTransactor) UpdateRoomInfo(opts *bind.TransactOpts, property common.Address, factory common.Address, location []byte, price *big.Int, area []byte, nextStatus uint8, description []byte, deviceIds []common.Address) (*types.Transaction, error) {
	return _Leasehold.contract.Transact(opts, "updateRoomInfo", property, factory, location, price, area, nextStatus, description, deviceIds)
}

// UpdateRoomInfo is a paid mutator transaction binding the contract method 0x62ce4f57.
//
// Solidity: function updateRoomInfo(address property, address factory, bytes location, uint256 price, bytes area, uint8 nextStatus, bytes description, address[] deviceIds) payable returns()
func (_Leasehold *LeaseholdSession) UpdateRoomInfo(property common.Address, factory common.Address, location []byte, price *big.Int, area []byte, nextStatus uint8, description []byte, deviceIds []common.Address) (*types.Transaction, error) {
	return _Leasehold.Contract.UpdateRoomInfo(&_Leasehold.TransactOpts, property, factory, location, price, area, nextStatus, description, deviceIds)
}

// UpdateRoomInfo is a paid mutator transaction binding the contract method 0x62ce4f57.
//
// Solidity: function updateRoomInfo(address property, address factory, bytes location, uint256 price, bytes area, uint8 nextStatus, bytes description, address[] deviceIds) payable returns()
func (_Leasehold *LeaseholdTransactorSession) UpdateRoomInfo(property common.Address, factory common.Address, location []byte, price *big.Int, area []byte, nextStatus uint8, description []byte, deviceIds []common.Address) (*types.Transaction, error) {
	return _Leasehold.Contract.UpdateRoomInfo(&_Leasehold.TransactOpts, property, factory, location, price, area, nextStatus, description, deviceIds)
}

// UploadLogs is a paid mutator transaction binding the contract method 0xc05cc454.
//
// Solidity: function uploadLogs(uint256 consumption) returns()

/******************************************************************************************************************************/
func (_Leasehold *LeaseholdCaller) ReadUploadLogs(output string) error {
	var ()
	out := &[]interface{}{}
	err := _Leasehold.contract.ReadCall(out, "uploadLogs", hexutil.MustDecode(output))
	return err
}

// UploadLogs is a free data retrieval call binding the contract method 0xc05cc454.
//
// Solidity: function uploadLogs(uint256 consumption) returns()
func (_Leasehold *LeaseholdSession) ReadUploadLogs(output string) error {
	return _Leasehold.Contract.ReadUploadLogs(output)
}

// UploadLogs is a free data retrieval call binding the contract method 0xc05cc454.
//
// Solidity: function uploadLogs(uint256 consumption) returns()
func (_Leasehold *LeaseholdCallerSession) ReadUploadLogs(output string) error {
	return _Leasehold.Contract.ReadUploadLogs(output)
}

/******************************************************************************************************************************/

func (_Leasehold *LeaseholdTransactor) UploadLogs(opts *bind.TransactOpts, consumption *big.Int) (*types.Transaction, error) {
	return _Leasehold.contract.Transact(opts, "uploadLogs", consumption)
}

// UploadLogs is a paid mutator transaction binding the contract method 0xc05cc454.
//
// Solidity: function uploadLogs(uint256 consumption) returns()
func (_Leasehold *LeaseholdSession) UploadLogs(consumption *big.Int) (*types.Transaction, error) {
	return _Leasehold.Contract.UploadLogs(&_Leasehold.TransactOpts, consumption)
}

// UploadLogs is a paid mutator transaction binding the contract method 0xc05cc454.
//
// Solidity: function uploadLogs(uint256 consumption) returns()
func (_Leasehold *LeaseholdTransactorSession) UploadLogs(consumption *big.Int) (*types.Transaction, error) {
	return _Leasehold.Contract.UploadLogs(&_Leasehold.TransactOpts, consumption)
}

// LeaseholdEvtOrderMadeIterator is returned from FilterEvtOrderMade and is used to iterate over the raw logs and unpacked data for EvtOrderMade events raised by the Leasehold contract.
type LeaseholdEvtOrderMadeIterator struct {
	Event *LeaseholdEvtOrderMade // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log         // Log channel receiving the found contract events
	sub  fiscobcos.Subscription // Subscription for errors, completion and termination
	done bool                   // Whether the subscription completed delivering logs
	fail error                  // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeaseholdEvtOrderMadeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeaseholdEvtOrderMade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeaseholdEvtOrderMade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeaseholdEvtOrderMadeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeaseholdEvtOrderMadeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeaseholdEvtOrderMade represents a EvtOrderMade event raised by the Leasehold contract.
type LeaseholdEvtOrderMade struct {
	OrderId  *big.Int
	From     common.Address
	To       common.Address
	Location []byte
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterEvtOrderMade is a free log retrieval operation binding the contract event 0xf3f2ef3f7ff6a1936e0ec6c24b3822a5d5bab188cc85e800821aa9f3df8b9dd8.
//
// Solidity: event EvtOrderMade(uint256 orderId, address from, address to, bytes location, uint256 amount)
func (_Leasehold *LeaseholdFilterer) FilterEvtOrderMade(opts *bind.FilterOpts) (*LeaseholdEvtOrderMadeIterator, error) {

	logs, sub, err := _Leasehold.contract.FilterLogs(opts, "EvtOrderMade")
	if err != nil {
		return nil, err
	}
	return &LeaseholdEvtOrderMadeIterator{contract: _Leasehold.contract, event: "EvtOrderMade", logs: logs, sub: sub}, nil
}

// WatchEvtOrderMade is a free log subscription operation binding the contract event 0xf3f2ef3f7ff6a1936e0ec6c24b3822a5d5bab188cc85e800821aa9f3df8b9dd8.
//
// Solidity: event EvtOrderMade(uint256 orderId, address from, address to, bytes location, uint256 amount)
func (_Leasehold *LeaseholdFilterer) WatchEvtOrderMade(opts *bind.WatchOpts, sink chan<- *LeaseholdEvtOrderMade) (event.Subscription, error) {

	logs, sub, err := _Leasehold.contract.WatchLogs(opts, "EvtOrderMade")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeaseholdEvtOrderMade)
				if err := _Leasehold.contract.UnpackLog(event, "EvtOrderMade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvtOrderMade is a log parse operation binding the contract event 0xf3f2ef3f7ff6a1936e0ec6c24b3822a5d5bab188cc85e800821aa9f3df8b9dd8.
//
// Solidity: event EvtOrderMade(uint256 orderId, address from, address to, bytes location, uint256 amount)
func (_Leasehold *LeaseholdFilterer) ParseEvtOrderMade(log types.Log) (*LeaseholdEvtOrderMade, error) {
	event := new(LeaseholdEvtOrderMade)
	if err := _Leasehold.contract.UnpackLog(event, "EvtOrderMade", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LeaseholdEvtRecordRoomRegisterIterator is returned from FilterEvtRecordRoomRegister and is used to iterate over the raw logs and unpacked data for EvtRecordRoomRegister events raised by the Leasehold contract.
type LeaseholdEvtRecordRoomRegisterIterator struct {
	Event *LeaseholdEvtRecordRoomRegister // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log         // Log channel receiving the found contract events
	sub  fiscobcos.Subscription // Subscription for errors, completion and termination
	done bool                   // Whether the subscription completed delivering logs
	fail error                  // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeaseholdEvtRecordRoomRegisterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeaseholdEvtRecordRoomRegister)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeaseholdEvtRecordRoomRegister)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeaseholdEvtRecordRoomRegisterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeaseholdEvtRecordRoomRegisterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeaseholdEvtRecordRoomRegister represents a EvtRecordRoomRegister event raised by the Leasehold contract.
type LeaseholdEvtRecordRoomRegister struct {
	Owner       common.Address
	Property    common.Address
	Factory     common.Address
	Location    []byte
	Price       *big.Int
	Area        []byte
	Status      uint8
	Description []byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterEvtRecordRoomRegister is a free log retrieval operation binding the contract event 0x5c08d5d55ce51982fdd8cd02e5901a3a7339a0657b0a35861397796265920bfb.
//
// Solidity: event EvtRecordRoomRegister(address owner, address property, address factory, bytes location, uint256 price, bytes area, uint8 status, bytes description)
func (_Leasehold *LeaseholdFilterer) FilterEvtRecordRoomRegister(opts *bind.FilterOpts) (*LeaseholdEvtRecordRoomRegisterIterator, error) {

	logs, sub, err := _Leasehold.contract.FilterLogs(opts, "EvtRecordRoomRegister")
	if err != nil {
		return nil, err
	}
	return &LeaseholdEvtRecordRoomRegisterIterator{contract: _Leasehold.contract, event: "EvtRecordRoomRegister", logs: logs, sub: sub}, nil
}

// WatchEvtRecordRoomRegister is a free log subscription operation binding the contract event 0x5c08d5d55ce51982fdd8cd02e5901a3a7339a0657b0a35861397796265920bfb.
//
// Solidity: event EvtRecordRoomRegister(address owner, address property, address factory, bytes location, uint256 price, bytes area, uint8 status, bytes description)
func (_Leasehold *LeaseholdFilterer) WatchEvtRecordRoomRegister(opts *bind.WatchOpts, sink chan<- *LeaseholdEvtRecordRoomRegister) (event.Subscription, error) {

	logs, sub, err := _Leasehold.contract.WatchLogs(opts, "EvtRecordRoomRegister")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeaseholdEvtRecordRoomRegister)
				if err := _Leasehold.contract.UnpackLog(event, "EvtRecordRoomRegister", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvtRecordRoomRegister is a log parse operation binding the contract event 0x5c08d5d55ce51982fdd8cd02e5901a3a7339a0657b0a35861397796265920bfb.
//
// Solidity: event EvtRecordRoomRegister(address owner, address property, address factory, bytes location, uint256 price, bytes area, uint8 status, bytes description)
func (_Leasehold *LeaseholdFilterer) ParseEvtRecordRoomRegister(log types.Log) (*LeaseholdEvtRecordRoomRegister, error) {
	event := new(LeaseholdEvtRecordRoomRegister)
	if err := _Leasehold.contract.UnpackLog(event, "EvtRecordRoomRegister", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LeaseholdEvtRegisterDeviceIterator is returned from FilterEvtRegisterDevice and is used to iterate over the raw logs and unpacked data for EvtRegisterDevice events raised by the Leasehold contract.
type LeaseholdEvtRegisterDeviceIterator struct {
	Event *LeaseholdEvtRegisterDevice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log         // Log channel receiving the found contract events
	sub  fiscobcos.Subscription // Subscription for errors, completion and termination
	done bool                   // Whether the subscription completed delivering logs
	fail error                  // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeaseholdEvtRegisterDeviceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeaseholdEvtRegisterDevice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeaseholdEvtRegisterDevice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeaseholdEvtRegisterDeviceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeaseholdEvtRegisterDeviceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeaseholdEvtRegisterDevice represents a EvtRegisterDevice event raised by the Leasehold contract.
type LeaseholdEvtRegisterDevice struct {
	Location []byte
	Factory  common.Address
	Category []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterEvtRegisterDevice is a free log retrieval operation binding the contract event 0xc74d72b695002a6ada4592e67c0a815265eeed7dc782277d466de52250f5b886.
//
// Solidity: event EvtRegisterDevice(bytes location, address factory, bytes category)
func (_Leasehold *LeaseholdFilterer) FilterEvtRegisterDevice(opts *bind.FilterOpts) (*LeaseholdEvtRegisterDeviceIterator, error) {

	logs, sub, err := _Leasehold.contract.FilterLogs(opts, "EvtRegisterDevice")
	if err != nil {
		return nil, err
	}
	return &LeaseholdEvtRegisterDeviceIterator{contract: _Leasehold.contract, event: "EvtRegisterDevice", logs: logs, sub: sub}, nil
}

// WatchEvtRegisterDevice is a free log subscription operation binding the contract event 0xc74d72b695002a6ada4592e67c0a815265eeed7dc782277d466de52250f5b886.
//
// Solidity: event EvtRegisterDevice(bytes location, address factory, bytes category)
func (_Leasehold *LeaseholdFilterer) WatchEvtRegisterDevice(opts *bind.WatchOpts, sink chan<- *LeaseholdEvtRegisterDevice) (event.Subscription, error) {

	logs, sub, err := _Leasehold.contract.WatchLogs(opts, "EvtRegisterDevice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeaseholdEvtRegisterDevice)
				if err := _Leasehold.contract.UnpackLog(event, "EvtRegisterDevice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvtRegisterDevice is a log parse operation binding the contract event 0xc74d72b695002a6ada4592e67c0a815265eeed7dc782277d466de52250f5b886.
//
// Solidity: event EvtRegisterDevice(bytes location, address factory, bytes category)
func (_Leasehold *LeaseholdFilterer) ParseEvtRegisterDevice(log types.Log) (*LeaseholdEvtRegisterDevice, error) {
	event := new(LeaseholdEvtRegisterDevice)
	if err := _Leasehold.contract.UnpackLog(event, "EvtRegisterDevice", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LeaseholdEvtTransferIterator is returned from FilterEvtTransfer and is used to iterate over the raw logs and unpacked data for EvtTransfer events raised by the Leasehold contract.
type LeaseholdEvtTransferIterator struct {
	Event *LeaseholdEvtTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log         // Log channel receiving the found contract events
	sub  fiscobcos.Subscription // Subscription for errors, completion and termination
	done bool                   // Whether the subscription completed delivering logs
	fail error                  // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeaseholdEvtTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeaseholdEvtTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeaseholdEvtTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeaseholdEvtTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeaseholdEvtTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeaseholdEvtTransfer represents a EvtTransfer event raised by the Leasehold contract.
type LeaseholdEvtTransfer struct {
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEvtTransfer is a free log retrieval operation binding the contract event 0x425acad47dffcf33942883e404a10e6db84b5ebdf3eeebcd539925450827da41.
//
// Solidity: event EvtTransfer(address to, uint256 amount)
func (_Leasehold *LeaseholdFilterer) FilterEvtTransfer(opts *bind.FilterOpts) (*LeaseholdEvtTransferIterator, error) {

	logs, sub, err := _Leasehold.contract.FilterLogs(opts, "EvtTransfer")
	if err != nil {
		return nil, err
	}
	return &LeaseholdEvtTransferIterator{contract: _Leasehold.contract, event: "EvtTransfer", logs: logs, sub: sub}, nil
}

// WatchEvtTransfer is a free log subscription operation binding the contract event 0x425acad47dffcf33942883e404a10e6db84b5ebdf3eeebcd539925450827da41.
//
// Solidity: event EvtTransfer(address to, uint256 amount)
func (_Leasehold *LeaseholdFilterer) WatchEvtTransfer(opts *bind.WatchOpts, sink chan<- *LeaseholdEvtTransfer) (event.Subscription, error) {

	logs, sub, err := _Leasehold.contract.WatchLogs(opts, "EvtTransfer")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeaseholdEvtTransfer)
				if err := _Leasehold.contract.UnpackLog(event, "EvtTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEvtTransfer is a log parse operation binding the contract event 0x425acad47dffcf33942883e404a10e6db84b5ebdf3eeebcd539925450827da41.
//
// Solidity: event EvtTransfer(address to, uint256 amount)
func (_Leasehold *LeaseholdFilterer) ParseEvtTransfer(log types.Log) (*LeaseholdEvtTransfer, error) {
	event := new(LeaseholdEvtTransfer)
	if err := _Leasehold.contract.UnpackLog(event, "EvtTransfer", log); err != nil {
		return nil, err
	}
	return event, nil
}

// LeaseholdOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Leasehold contract.
type LeaseholdOwnershipTransferredIterator struct {
	Event *LeaseholdOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log         // Log channel receiving the found contract events
	sub  fiscobcos.Subscription // Subscription for errors, completion and termination
	done bool                   // Whether the subscription completed delivering logs
	fail error                  // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LeaseholdOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LeaseholdOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LeaseholdOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LeaseholdOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LeaseholdOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LeaseholdOwnershipTransferred represents a OwnershipTransferred event raised by the Leasehold contract.
type LeaseholdOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Leasehold *LeaseholdFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*LeaseholdOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Leasehold.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &LeaseholdOwnershipTransferredIterator{contract: _Leasehold.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Leasehold *LeaseholdFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *LeaseholdOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Leasehold.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LeaseholdOwnershipTransferred)
				if err := _Leasehold.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Leasehold *LeaseholdFilterer) ParseOwnershipTransferred(log types.Log) (*LeaseholdOwnershipTransferred, error) {
	event := new(LeaseholdOwnershipTransferred)
	if err := _Leasehold.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}
